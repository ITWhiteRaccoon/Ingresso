@using Microsoft.Extensions.Localization
@using IngressoApi.Models
@using IngressoApi.Services
@using RadarCine.Services

@inject IStringLocalizer<SetupView> Localizer
@inject IngressoClient ApiClient
@inject UserSelectionService SelectionService
@inject NavigationManager Navigation

<style>
    .setup-container {
        width: 100%;
        box-sizing: border-box;

        max-width: 800px;

        margin-left: auto;
        margin-right: auto;

        /* Animação de max-height. O conteúdo "vaza" para fora do 0px e é cortado. */
        overflow: hidden;
        animation: growDown 3s ease-in-out forwards;
    }

    @@keyframes growDown {
        from {
            max-height: 0;
            opacity: 0;
        }
        to {
            max-height: 70vh;
            opacity: 1;
        }
    }
</style>

<div class="setup-container">
    <FluentGrid Spacing="2">
        <FluentGridItem xs="12">
            <FluentAutocomplete TOption="State"
                                Label="@Localizer["StateSelectLabel"]"
                                Multiple="true"
                                KeepOpen="true"
                                Disabled="!_allStates.Any()"
                                Items="_filteredStates"
                                Position="SelectPosition.Below"
                                OnOptionsSearch="e => AutocompleteFilter(e, _allStates, ref _filteredStates)"
                                SelectedOptions="_selectedStates"
                                SelectedOptionsChanged="OnStateSelectionChanged"/>
        </FluentGridItem>

        <FluentGridItem xs="12">
            <FluentAutocomplete TOption="City"
                                Label="@Localizer["CitySelectLabel"]"
                                Multiple="true"
                                KeepOpen="true"
                                Disabled="!_filteredCities.Any()"
                                Items="_filteredCities"
                                Position="SelectPosition.Below"
                                OnOptionsSearch="e => AutocompleteFilter(e, _allCities, ref _filteredCities)"
                                SelectedOptions="_selectedCities"
                                SelectedOptionsChanged="OnCitySelectionChanged"/>
        </FluentGridItem>

        <FluentGridItem xs="12">
            <FluentAutocomplete TOption="TheaterDropdownViewModel"
                                Label="@Localizer["TheaterSelectLabel"]"
                                Multiple="true"
                                KeepOpen="true"
                                Disabled="!_filteredTheaters.Any()"
                                Items="_filteredTheaters"
                                Position="SelectPosition.Below"
                                OnOptionsSearch="e => AutocompleteFilter(e, _allTheaters, ref _filteredTheaters)"
                                SelectedOptions="_selectedTheaters"
                                SelectedOptionsChanged="theaters => _selectedTheaters = theaters.ToList()"
                                OptionTemplate="RenderTheaterTemplate"
                                OptionDisabled="option => option.IsHeader"/>
        </FluentGridItem>

        <FluentGridItem xs="12">
            <FluentButton OnClick="SaveAndNavigate"
                          Disabled="@(!_selectedTheaters.Any())">@Localizer["SaveAndContinue"]</FluentButton>
        </FluentGridItem>
    </FluentGrid>
</div>

@code {
    private ICollection<State> _allStates = new List<State>();
    private ICollection<City> _allCities = new List<City>();
    private ICollection<TheaterDropdownViewModel> _allTheaters = new List<TheaterDropdownViewModel>();

    private ICollection<State> _filteredStates = new List<State>();
    private ICollection<City> _filteredCities = new List<City>();
    private ICollection<TheaterDropdownViewModel> _filteredTheaters = new List<TheaterDropdownViewModel>();

    private ICollection<State> _selectedStates = new List<State>();
    private ICollection<City> _selectedCities = new List<City>();
    private ICollection<TheaterDropdownViewModel> _selectedTheaters = new List<TheaterDropdownViewModel>();

    protected override async Task OnInitializedAsync() {
        _allStates = await ApiClient.GetAllStatesWithCitiesAsync();
        _filteredStates = _allStates;
    }

    private void OnStateSelectionChanged(IEnumerable<State> states) {
        // 1. Limpar as listas
        _selectedStates.Clear();
        _allCities.Clear();
        _selectedCities.Clear();
        _allTheaters.Clear();
        _selectedTheaters.Clear();

        // 2. Repopular a próxima lista (allCities) e atualizar a seleção de estados
        foreach (var state in states) {
            _selectedStates.Add(state);
            _allCities = _allCities.Union(state.Cities).ToList();
        }

        // 3. Atualizar as listas filtradas para a UI
        _filteredCities = _allCities;
        _filteredTheaters = _allTheaters;
    }

    private async Task OnCitySelectionChanged(IEnumerable<City> cities) {
        _selectedCities.Clear();
        _allTheaters.Clear();
        _selectedTheaters.Clear();

        foreach (var city in cities) {
            _selectedCities.Add(city);

            _allTheaters.Add(new TheaterDropdownViewModel { Theater = new Theater { CityName = city.Name }, IsHeader = true });
            var theatersInCity = await ApiClient.GetTheatersByCityAsync(city.Id);
            foreach (var theater in theatersInCity) {
                _allTheaters.Add(new TheaterDropdownViewModel { Theater = theater, IsHeader = false });
            }
        }

        _filteredTheaters = _allTheaters;

        await InvokeAsync(StateHasChanged); // Chamar StateHasChanged por causa do await
    }

    private RenderFragment<TheaterDropdownViewModel> RenderTheaterTemplate => theater =>
        @<div>
            @if (theater.IsHeader) {
                <div style="font-weight: bold; pointer-events: none;">
                    @theater.Theater.CityName
                </div>
            }
            else {
                <div style="padding-left: 1rem;">@theater.Theater.Name</div>
            }
        </div>;

    private static void AutocompleteFilter<T>(OptionsSearchEventArgs<T> eventArgs, ICollection<T> allOptions, ref ICollection<T> filteredOptions) {
        if (string.IsNullOrWhiteSpace(eventArgs.Text)) {
            filteredOptions = allOptions;
        }
        else {
            filteredOptions = allOptions
                .Where(option => option.ToString().Contains(eventArgs.Text, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }

    private void SaveAndNavigate() {
        var theatersToStore = _selectedTheaters
            .Where(th => !th.IsHeader)
            .Select(th => th.Theater)
            .ToList();

        SelectionService.StoreSelectedTheaters(theatersToStore);

        Navigation.NavigateTo("/Movies");
    }

    private class TheaterDropdownViewModel {
        public Theater Theater { get; set; } = default!;
        public bool IsHeader { get; set; }

        public override string ToString() => Theater.Name;
    }

}
